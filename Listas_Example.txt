==============================
 RESUMEN DE MÉTODOS - LISTA C++
==============================

TIPO DE ESTRUCTURA:
Lista estática (arreglo con tamaño máximo definido).

---------------------------------------
1. insertarElemento(int valor)
---------------------------------------
Descripción: Agrega un nuevo elemento al final de la lista.
Lógica: Verifica si hay espacio disponible y almacena el valor en la última posición.
Complejidad temporal: O(1)

---------------------------------------
2. eliminarElemento(int valor)
---------------------------------------
Descripción: Elimina la primera aparición de un valor en la lista.
Lógica: Busca el valor y mueve todos los elementos siguientes una posición a la izquierda.
Complejidad temporal: O(n)

---------------------------------------
3. busquedaSecuencial(int valor)
---------------------------------------
Descripción: Busca un elemento recorriendo la lista de inicio a fin.
Lógica: Compara secuencialmente hasta encontrar el valor.
Complejidad temporal: O(n)

---------------------------------------
4. busquedaBinaria(int valor)
---------------------------------------
Descripción: Busca un elemento dividiendo la lista ordenada en mitades.
Lógica: Requiere que la lista esté ordenada previamente.
Complejidad temporal: O(log n)

---------------------------------------
5. ordenarBurbuja()
---------------------------------------
Descripción: Ordena comparando elementos adyacentes y colocando el mayor al final.
Lógica: Realiza múltiples pasadas moviendo los valores mayores hacia el final.
Complejidad temporal: O(n^2)

---------------------------------------
6. ordenarSeleccion()
---------------------------------------
Descripción: Ordena encontrando el mínimo y colocándolo en su lugar correcto.
Lógica: Selecciona el elemento más pequeño de la parte no ordenada.
Complejidad temporal: O(n^2)

---------------------------------------
7. ordenarInsercion()
---------------------------------------
Descripción: Ordena insertando cada elemento en la posición adecuada dentro de la parte ya ordenada.
Lógica: Compara el nuevo elemento con los anteriores y lo "inserta" en su lugar correcto.
Complejidad temporal: O(n^2), pero eficiente en listas casi ordenadas.

---------------------------------------
8. mostrarLista()
---------------------------------------
Descripción: Muestra todos los elementos actuales de la lista.
Lógica: Recorre e imprime desde índice 0 hasta tamaño - 1.
Complejidad temporal: O(n)

---------------------------------------
RECOMENDACIONES FINALES
---------------------------------------
- Usar búsqueda binaria solo si la lista está ordenada.
- Para listas grandes, usar algoritmos más eficientes como Merge Sort o Quick Sort.
- Este tipo de lista es limitado; para estructuras dinámicas, usar listas enlazadas.
